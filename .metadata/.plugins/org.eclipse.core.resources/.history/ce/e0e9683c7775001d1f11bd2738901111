

import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


//SELECT T.SN, T.time, P.SN AS PSN, P.title AS Ptitle, P.isOP AS Pisop, C.SN AS CSN, C.name AS Cname, M.SN AS MSN,M.name AS Mname FROM thread AS T 
//LEFT JOIN category AS C on C.SN=T.categorySN 
//LEFT JOIN post AS P on P.threadSN=T.SN 
//LEFT JOIN member AS M on M.SN=P.memberSN 
//FOR JSON PATH  

public class QueryHelper {
	Connection conn;

	public String getThreads() {
		conn = ConnectionUtil.getConnectionForum();
		String str ="";
		try {
			String sqlstr = "SELECT T.SN, T.time, P.SN AS PSN, P.title AS Ptitle, P.isOP AS Pisop, C.SN AS CSN, C.name AS Cname, M.SN AS MSN,M.name AS Mname FROM thread AS T ";
			sqlstr += "LEFT JOIN category AS C on C.SN=T.categorySN ";
			sqlstr += "LEFT JOIN post AS P on P.threadSN=T.SN ";
			sqlstr += "LEFT JOIN member AS M on M.SN=P.memberSN ";
			sqlstr += "WHERE P.isOP =1 ";
			sqlstr += "FOR JSON PATH  ";
			PreparedStatement pstmt = conn.prepareStatement(sqlstr);
			ResultSet rs = pstmt.executeQuery();
			
			while (rs.next()) {
				str += rs.getNString(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			ConnectionUtil.free();
		}
		return str;
	}
	
	public String getThread(int threadSN) {
		conn = ConnectionUtil.getConnectionForum();
		String str ="";
		try {
			String sqlstr = "SELECT T.SN, T.time AS Ttime, P.SN AS PSN, P.title AS Ptitle, P.body AS Pbody, P.time AS Ptime,P.isOP AS Pisop,";
			sqlstr += "C.SN AS CSN, C.name AS Cname, M.SN AS MSN,M.name AS Mname FROM thread AS T ";
			sqlstr += "LEFT JOIN category AS C on C.SN=T.categorySN ";
			sqlstr += "LEFT JOIN post AS P on P.threadSN=T.SN ";
			sqlstr += "LEFT JOIN member AS M on M.SN=P.memberSN ";
			sqlstr += "WHERE threadSN=? ";
			sqlstr += "FOR JSON PATH  ";
			PreparedStatement pstmt = conn.prepareStatement(sqlstr);
			pstmt.setInt(1, threadSN);
			ResultSet rs = pstmt.executeQuery();
			
			while (rs.next()) {
				str += rs.getNString(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			ConnectionUtil.free();
		}
		return str;
	}
	
	public String newThread() {
		conn = ConnectionUtil.getConnectionForum();
		String str ="";
		try {
			String sqlstr = "SELECT T.SN, T.time, P.SN AS PSN, P.title AS Ptitle, P.body AS Pbody, P.time AS Ptime, P.isOP AS Pisop, C.SN AS CSN, C.name AS Cname, M.SN AS MSN,M.name AS Mname FROM thread AS T ";
			sqlstr += "LEFT JOIN category AS C on C.SN=T.categorySN ";
			sqlstr += "LEFT JOIN post AS P on P.threadSN=T.SN ";
			sqlstr += "LEFT JOIN member AS M on M.SN=P.memberSN ";
			sqlstr += "FOR JSON PATH  ";
			PreparedStatement pstmt = conn.prepareStatement(sqlstr);
			ResultSet rs = pstmt.executeQuery();
			
			while (rs.next()) {
				str += rs.getNString(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			ConnectionUtil.free();
		}
		return str;
	}

	public void insert(String tableName, Object obj, boolean ignoreSN) {
		conn = ConnectionUtil.getConnectionForum();
		int objCount = 0;
		try {
			String sqlstr = "INSERT INTO ";
			sqlstr += tableName;
			sqlstr += " (";
			Map<String, Object> map = new HashMap<String, Object>();
			List<String> paramList = new ArrayList<String>();
			for (Field field : obj.getClass().getDeclaredFields()) {
				field.setAccessible(true); // You might want to set modifier to public first.
				Object value = field.get(obj);
				map.put(field.getName(), value);

				if (ignoreSN && field.getName().equals("SN")) {
					// no insert
				} else {
					sqlstr += field.getName() + ",";
					if (value == null) {
						paramList.add("null");
					} else {
						paramList.add(value.toString());
						System.out.println(value.toString());
					}

					objCount++;

				}
			}
			sqlstr = sqlstr.substring(0, sqlstr.length() - 1);
			sqlstr += ") ";
			sqlstr += "VALUES ";
			String sqlparams = "(" + String.join("", Collections.nCopies(objCount, "?,")).substring(0, objCount * 2 - 1)
					+ ")"; // (?,?,?,?)
			sqlstr += sqlparams;

			PreparedStatement pstmt = conn.prepareStatement(sqlstr);

			for (int i = 0; i < paramList.size(); i++) {
				pstmt.setString(i + 1, paramList.get(i));
			}

			int updateCount = pstmt.executeUpdate();

		} catch (SQLException | IllegalArgumentException | IllegalAccessException e) {
			e.printStackTrace();
		} finally {
			ConnectionUtil.free();
		}

	}


}
